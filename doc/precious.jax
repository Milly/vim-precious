precious.txt	コンテキストによって 'filetype' を切り換える

==============================================================================
概要						*precious-introduction*

*precious* はコンテキストによって 'filetype' を切り換える為のプラグインです。


Requirement:

  context_filetype.vim - https://github.com/Shougo/context_filetype.vim


==============================================================================
使い方						*precious-usage*


==============================================================================
インターフェース				*precious-interface*
------------------------------------------------------------------------------
コマンド					*precious-commands*

:PreciousSwitch [{filetype}]			*:PreciousSwitch*
	内部で {filetype} を引数にした |precious#switch()| を呼び出します。

:PreciousSetContextLocal {option}		*:PreciousSetContextLocal*
	現在のコンテキスに対する |setlocal| {option} を行います。
	そのコンテキストでのみ設定を行いたいような時に使用します。
	ここで設定された値は設定したコンテキストを抜けるとリセットされます。

Example :>
	" setlocal tabstop=8 と等価
	" コンテキストを抜けると元の値が設定される
	PreciousSetContextLocal tabstop=8
<

:PreciousReset					*:PreciousReset*
	|precious#base_filetype()| を引数にした |:PreciousSwitch| を呼び出しま
	す。
	元の 'filetype' に戻したい場合はこのコマンドを呼び出して下さい。

------------------------------------------------------------------------------
関数						*precious-functions*

precious#context_filetype()			*precious#context_filetype()*
	現在のコンテキストを意識した 'filetype' を返します。
	コンテキストの判定は |precious-matcher| によって処理されます。
	コンテキストが見つからなければ |precious#base_filetype()| を返します。

precious#base_filetype()			*precious#base_filetype()*
	元となる 'filetype' を返します。

precious#set_base_filetype()			*precious#set_base_filetype()*
	元となる 'filetype' を設定します。

precious#switch([{filetype}])			*precious##switch()*
	{filetype} へ切り換える処理を行います。
	{filetype} が現在の 'filetype' でなければ |precious-switcher| で定義さ
	れている処理を呼び出します。
	{filetype} が無ければ現在のコンテキストから 'filetype' を決定します。

------------------------------------------------------------------------------
autocmd						*precious-autocmd*

PreciousFileType				*PreciousFileType*
	コンテキストが切り替わった時に呼ばれます。
Example: >
	augroup test
	autocmd!
		" コンテキストが切り替わった時にその filetype を表示
		autocmd User PreciousFileType :echo precious#context_filetype()
	augroup END
<


PreciousFiletype_{filetype}			*PreciousFileType_*
	{filetype} のコンテキストへ切り替わった時に呼ばれます。

Example: >
	augroup test
	autocmd!
		" ruby のコンテキストに入った時、tabstop=8 を設定する
		" :PreciousSetContextLocal を使用することで
		" ruby のコンテキストを抜けると元の値に戻すことが出来る
		autocmd User PreciousFiletype_ruby :PreciousSetContextLocal tabstop=8
	augroup END
<


==============================================================================
設定						*precious-setting*

------------------------------------------------------------------------------
変数						*precious-variables*

			*precious-precious_enable_auto_switch_CursorMoved*
g:precious_enable_auto_switch_CursorMoved
	1 が設定されていれば |CursorMoved| 時に |:PreciousSwitch| を呼び出しま
	す。
Default: >
	let g:precious_enable_auto_switch_CursorMoved = 1
<

			*precious-precious_enable_auto_switch_CursorMoved_i*
g:precious_enable_auto_switch_CursorMoved
	1 が設定されていれば |CursorMovedI| 時に |:PreciousSwitch| を呼び出しま
	す。
Default: >
	let g:precious_enable_auto_switch_CursorMoved_i = 1
<


==============================================================================
matcher						*precious-matcher*

現在のコンテキストがどの |filetype| なのかを判定する為に使用されます。

					*precious-matcher-context_blocks*
"context_filetype_vim"
	外部プラグインである context_filetype.vim を使用してコンテキストの判定
	を行います。


==============================================================================
switcher					*precious-switcher*

コンテキストが切り替わった時の処理を定義します。

"setfiletype"					*precious-switcher-setfiletype*
	コンテキストの filetype が 'filetype' に設定されます。
	この処理で 'filetype' が設定された場合、|precious#base_filetype| の値
	は変更されません。

"autocmd_context_filetype"		*precious-switcher-autocmd_context_filetype*
	コンテキストが切り替わった時に |precious-autocmd| を呼び出します。


==============================================================================
設定例						*precious-switcher*

insert mode に入った時に 'filetype' を切り換える。
>
	" カーソル移動時の自動切り替えを無効化
	let g:precious_enable_auto_switch_CursorMoved = 0
	let g:precious_enable_auto_switch_CursorMoved_i = 0

	" insert に入った時にスイッチし、抜けた時に元に戻す
	augroup test
		autocmd!
		autocmd InsertEnter * :PreciousSwitch
		autocmd InsertLeave * :PreciousReset
	augroup END
<


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
